var map = function(Interscript) {Interscript.define_map("un-ell-Grek-Latn-1987-phonetic", function(Interscript, map) {
map.dependencies = [];
map.stages.main = function(s) {
s = Interscript.gsub(s, "(?<=[ΑαΕεΗη])Υ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "f");
s = Interscript.gsub(s, "(?<=[ΑαΕεΗη])Υ(?="+Interscript.aliases.boundary+")", "f");
s = Interscript.gsub(s, "(?<=[ΑαΕεΗη])υ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "f");
s = Interscript.gsub(s, "(?<=[ΑαΕεΗη])υ(?="+Interscript.aliases.boundary+")", "f");
s = Interscript.gsub(s, "(?<=[ΑαΕεΗη])Υ", "v");
s = Interscript.gsub(s, "(?<=[ΑαΕεΗη])υ", "v");
s = Interscript.gsub(s, "Αύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "ɑf");
s = Interscript.gsub(s, "Αύ(?="+Interscript.aliases.boundary+")", "ɑf");
s = Interscript.gsub(s, "Αύ", "ɑv");
s = Interscript.gsub(s, "αύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "ɑf");
s = Interscript.gsub(s, "αύ(?="+Interscript.aliases.boundary+")", "ɑf");
s = Interscript.gsub(s, "αύ", "ɑv");
s = Interscript.gsub(s, "Εύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "ɛf");
s = Interscript.gsub(s, "Εύ(?="+Interscript.aliases.boundary+")", "ɛf");
s = Interscript.gsub(s, "Εύ", "ɛv");
s = Interscript.gsub(s, "εύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "ɛf");
s = Interscript.gsub(s, "εύ(?="+Interscript.aliases.boundary+")", "ɛf");
s = Interscript.gsub(s, "εύ", "ɛv");
s = Interscript.gsub(s, "Ηύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "if");
s = Interscript.gsub(s, "Ηύ(?="+Interscript.aliases.boundary+")", "if");
s = Interscript.gsub(s, "Ηύ", "iv");
s = Interscript.gsub(s, "ηύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", "if");
s = Interscript.gsub(s, "ηύ(?="+Interscript.aliases.boundary+")", "if");
s = Interscript.gsub(s, "ηύ", "iv");
s = Interscript.gsub(s, "Ο[υΥύ]", "u");
s = Interscript.gsub(s, "ο[υΥύ]", "u");
s = Interscript.gsub(s, "(?<=[ΆάΈέΉήΌό])Υ", "i");
s = Interscript.gsub(s, "(?<=[ΆάΈέΉήΌό])υ", "i");
s = Interscript.gsub(s, "Γ(?=[ξΞχΧ])", "n");
s = Interscript.gsub(s, "γ(?=[ξΞχΧ])", "n");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")Γ[Γγ]", "ŋɡ");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")γγ", "ŋɡ");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")Γ[Κκ]", "ŋɡ");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")γ[Κκ]", "ŋɡ");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")Γ[Γγ]", "ɡ");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")γγ", "ɡ");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")Γ[Κκ]", "ɡ");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")γ[Κκ]", "ɡ");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")Μ[πΠ]", "b");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")μ[πΠ]", "b");
s = Interscript.gsub(s, "Μ[πΠ](?="+Interscript.aliases.boundary+")", "b");
s = Interscript.gsub(s, "μ[πΠ](?="+Interscript.aliases.boundary+")", "b");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")Μ[πΠ](?!"+Interscript.aliases.boundary+")", "mb");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")μ[πΠ](?!"+Interscript.aliases.boundary+")", "mb");
s = Interscript.gsub(s, "(?<="+Interscript.aliases.boundary+")[Νν][ττ]", "d");
s = Interscript.gsub(s, "(?<!"+Interscript.aliases.boundary+")[Νν][ττ]", "nd");
s = Interscript.gsub(s, "Σ(?=[ΒβΓγΔδΖζΛλΜμΝνΡρ])", "z");
s = Interscript.gsub(s, "σ(?=[ΒβΓγΔδΖζΛλΜμΝνΡρ])", "z");
s = Interscript.gsub(s, "Α[Ιιί]", "ɛ");
s = Interscript.gsub(s, "α[Ιιί]", "ɛ");
s = Interscript.gsub(s, "Υ[Ιιί]", "i");
s = Interscript.gsub(s, "υ[Ιιί]", "i");
s = Interscript.gsub(s, "Ε[Ιιί]", "i");
s = Interscript.gsub(s, "ε[Ιιί]", "i");
s = Interscript.gsub(s, "Ο[Ιιί]", "i");
s = Interscript.gsub(s, "ο[Ιιί]", "i");
s = Interscript.gsub(s, "Τ[ζΖ]", "dz");
s = Interscript.gsub(s, "τ[ζΖ]", "dz");
s = Interscript.gsub(s, ";", "?");
s = Interscript.gsub(s, ";", "?");
s = Interscript.parallel_replace_tree(s, map.cache.PTREE_2985032195769629775);
s = Interscript.gsub(s, "vv", "v");
s = Interscript.gsub(s, "ðð", "ð");
s = Interscript.gsub(s, "zz", "z");
s = Interscript.gsub(s, "θθ", "θ");
s = Interscript.gsub(s, "kk", "k");
s = Interscript.gsub(s, "ll", "l");
s = Interscript.gsub(s, "mm", "m");
s = Interscript.gsub(s, "nn", "n");
s = Interscript.gsub(s, "pp", "p");
s = Interscript.gsub(s, "rr", "r");
s = Interscript.gsub(s, "ss", "s");
s = Interscript.gsub(s, "tt", "t");
s = Interscript.gsub(s, "ff", "f");
s = Interscript.gsub(s, "xx", "x");
s = Interscript.functions.downcase(s, {});
return s;
};
map.cache.PTREE_2985032195769629775 = {"39":{"":""},"902":{"":"ɑ"},"913":{"":"ɑ"},"914":{"":"v"},"915":{"":"ɣ"},"916":{"":"ð"},"917":{"":"ɛ","938":{"":"ɛi"},"970":{"":"ɛi"}},"904":{"970":{"":"ɛi"},"":"ɛ"},"918":{"":"z"},"919":{"":"i"},"920":{"":"θ"},"921":{"":"i"},"922":{"":"k"},"923":{"":"l"},"924":{"":"m"},"925":{"":"n"},"926":{"":"ks"},"927":{"":"o"},"928":{"":"p"},"929":{"":"r"},"931":{"":"s"},"932":{"":"t"},"933":{"":"i"},"934":{"":"f"},"935":{"":"x"},"936":{"":"ps"},"937":{"":"o"},"905":{"":"i"},"906":{"":"i"},"908":{"":"o"},"910":{"":"i"},"911":{"":"o"},"938":{"":"i"},"939":{"":"i"},"940":{"":"ɑ"},"945":{"":"ɑ"},"946":{"":"v"},"947":{"":"ɣ"},"948":{"":"ð"},"949":{"":"ɛ","970":{"":"ɛi"}},"941":{"970":{"":"ɛi"},"953":{"":"ɛi"},"":"ɛ"},"950":{"":"z"},"951":{"":"i"},"953":{"":"i"},"954":{"":"k"},"955":{"":"l"},"956":{"":"m"},"957":{"":"n"},"958":{"":"ks"},"959":{"":"o"},"960":{"":"p"},"961":{"":"r"},"963":{"":"s"},"962":{"":"s"},"964":{"":"t"},"965":{"":"i"},"966":{"":"f"},"967":{"":"x"},"968":{"":"ps"},"969":{"":"o"},"942":{"":"i"},"943":{"":"i"},"972":{"":"o"},"973":{"":"i"},"974":{"":"o"},"970":{"":"i"},"971":{"":"i"},"912":{"":"i"},"944":{"":"i"},"903":{"":";"},"183":{"":";"}};
});};if (typeof module !== 'undefined') { module.exports = map; }else if (typeof Interscript !== 'undefined') { map(Interscript); }else { throw "We couldn't dispatch Interscript from a map!"; }